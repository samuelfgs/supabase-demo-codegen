// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: aGwaDyFceaTJ7MmVgLqAKM
// Component: dZQFlEuvgPR
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { SupabaseEditButton } from "../../CodeComponents/UtilsComponents"; // plasmic-import: WwsEYXP7mwRu/codeComponent
import { SupabaseDeleteButton } from "../../CodeComponents/UtilsComponents"; // plasmic-import: qhy5MYQZKe_S/codeComponent
import { SupabaseMutation } from "../../CodeComponents/DatabaseComponents"; // plasmic-import: 4TsbaDRppPhb/codeComponent
import { SupabaseModal } from "../../CodeComponents/UtilsComponents"; // plasmic-import: 1xO-DTXyIZ-x/codeComponent
import { SupabaseTextField } from "../../CodeComponents/DisplayCollections"; // plasmic-import: lFC9CRSs6Y-w/codeComponent
import { SupabaseImgField } from "../../CodeComponents/DisplayCollections"; // plasmic-import: m-q4KZlXkHnO/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_copy_of_supabase.module.css"; // plasmic-import: aGwaDyFceaTJ7MmVgLqAKM/projectcss
import sty from "./PlasmicPost.module.css"; // plasmic-import: dZQFlEuvgPR/css

import EditIcon from "./icons/PlasmicIcon__Edit"; // plasmic-import: z0nK1hBoU9-T/icon
import DeleteIcon from "./icons/PlasmicIcon__Delete"; // plasmic-import: RfsqmqGRFWpt/icon

export type PlasmicPost__VariantMembers = {};

export type PlasmicPost__VariantsArgs = {};
type VariantPropType = keyof PlasmicPost__VariantsArgs;
export const PlasmicPost__VariantProps = new Array<VariantPropType>();

export type PlasmicPost__ArgsType = {
  title?: React.ReactNode;
  description?: React.ReactNode;
  image?: React.ReactNode;
};

type ArgPropType = keyof PlasmicPost__ArgsType;
export const PlasmicPost__ArgProps = new Array<ArgPropType>(
  "title",
  "description",
  "image"
);

export type PlasmicPost__OverridesType = {
  root?: p.Flex<"div">;
  supabaseEditButton?: p.Flex<typeof SupabaseEditButton>;
  supabaseDeleteButton?: p.Flex<typeof SupabaseDeleteButton>;
  supabaseMutation?: p.Flex<typeof SupabaseMutation>;
  supabaseModal?: p.Flex<typeof SupabaseModal>;
  supabaseImgField?: p.Flex<typeof SupabaseImgField>;
};

export interface DefaultPostProps {
  title?: React.ReactNode;
  description?: React.ReactNode;
  image?: React.ReactNode;
  className?: string;
}

function PlasmicPost__RenderFunc(props: {
  variants: PlasmicPost__VariantsArgs;
  args: PlasmicPost__ArgsType;
  overrides: PlasmicPost__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      {true ? (
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__bSzaV)}
        >
          <div className={classNames(projectcss.all, sty.freeBox___5NDD)}>
            {p.renderPlasmicSlot({
              defaultContents: (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__myj8G
                  )}
                >
                  <React.Fragment>
                    <React.Fragment>{""}</React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 700 }}
                    >
                      {"Title"}
                    </span>
                    <React.Fragment>{""}</React.Fragment>
                  </React.Fragment>
                </div>
              ),

              value: args.title,
              className: classNames(sty.slotTargetTitle)
            })}
          </div>

          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__hfQjR)}>
              {p.renderPlasmicSlot({
                defaultContents: (
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__xBxTd)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    loading={"lazy" as const}
                  />
                ),

                value: args.image
              })}
            </div>
          ) : null}

          <div className={classNames(projectcss.all, sty.freeBox__iq4Tq)}>
            {p.renderPlasmicSlot({
              defaultContents: "Description",
              value: args.description,
              className: classNames(sty.slotTargetDescription)
            })}
          </div>
        </p.Stack>
      ) : null}
      {true ? (
        <div className={classNames(projectcss.all, sty.freeBox__kq3W9)}>
          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__hrVGf)}
            >
              <SupabaseEditButton
                data-plasmic-name={"supabaseEditButton"}
                data-plasmic-override={overrides.supabaseEditButton}
                className={classNames("__wab_instance", sty.supabaseEditButton)}
                editPage={"/post/update/id" as const}
                id={"{{row.id}}" as const}
              >
                <EditIcon
                  className={classNames(projectcss.all, sty.svg__kg6PH)}
                  role={"img"}
                />
              </SupabaseEditButton>

              <SupabaseDeleteButton
                data-plasmic-name={"supabaseDeleteButton"}
                data-plasmic-override={overrides.supabaseDeleteButton}
                className={classNames(
                  "__wab_instance",
                  sty.supabaseDeleteButton
                )}
                id={"{{row.id}}" as const}
                modal={
                  <SupabaseMutation
                    data-plasmic-name={"supabaseMutation"}
                    data-plasmic-override={overrides.supabaseMutation}
                    className={classNames(
                      "__wab_instance",
                      sty.supabaseMutation
                    )}
                    filters={[
                      {
                        name: "eq",
                        args: [{ column: "id", value: "{{local.id}}" }]
                      }
                    ]}
                    method={"delete" as const}
                    redirectOnSuccess={"/" as const}
                    tableName={"posts" as const}
                  >
                    <SupabaseModal
                      data-plasmic-name={"supabaseModal"}
                      data-plasmic-override={overrides.supabaseModal}
                      className={classNames(
                        "__wab_instance",
                        sty.supabaseModal
                      )}
                      showModal={false}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__jpHqe
                        )}
                      >
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__k8Y9L
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__y6Mkp
                            )}
                          >
                            {"Title"}
                          </div>

                          <SupabaseTextField
                            className={classNames(
                              "__wab_instance",
                              sty.supabaseTextField__hLzuI
                            )}
                            name={"{{row.title}}" as const}
                          />
                        </p.Stack>

                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__jqsOp
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___4KUmS
                            )}
                          >
                            {"Content"}
                          </div>

                          <SupabaseTextField
                            className={classNames(
                              "__wab_instance",
                              sty.supabaseTextField__f0Ex
                            )}
                            name={"{{row.content}}" as const}
                          />
                        </p.Stack>

                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__gBpIw
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__nBwN5
                            )}
                          >
                            {"Image"}
                          </div>

                          {true ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__ajvm8
                              )}
                            >
                              <SupabaseImgField
                                data-plasmic-name={"supabaseImgField"}
                                data-plasmic-override={
                                  overrides.supabaseImgField
                                }
                                className={classNames(
                                  "__wab_instance",
                                  sty.supabaseImgField
                                )}
                                url={"{{row.imageUrl}}" as const}
                              />
                            </div>
                          ) : null}
                        </p.Stack>
                      </div>
                    </SupabaseModal>
                  </SupabaseMutation>
                }
              >
                <DeleteIcon
                  className={classNames(projectcss.all, sty.svg__c0Snr)}
                  role={"img"}
                />
              </SupabaseDeleteButton>
            </p.Stack>
          ) : null}
        </div>
      ) : null}
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "supabaseEditButton",
    "supabaseDeleteButton",
    "supabaseMutation",
    "supabaseModal",
    "supabaseImgField"
  ],
  supabaseEditButton: ["supabaseEditButton"],
  supabaseDeleteButton: [
    "supabaseDeleteButton",
    "supabaseMutation",
    "supabaseModal",
    "supabaseImgField"
  ],
  supabaseMutation: ["supabaseMutation", "supabaseModal", "supabaseImgField"],
  supabaseModal: ["supabaseModal", "supabaseImgField"],
  supabaseImgField: ["supabaseImgField"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  supabaseEditButton: typeof SupabaseEditButton;
  supabaseDeleteButton: typeof SupabaseDeleteButton;
  supabaseMutation: typeof SupabaseMutation;
  supabaseModal: typeof SupabaseModal;
  supabaseImgField: typeof SupabaseImgField;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPost__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPost__VariantsArgs;
    args?: PlasmicPost__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPost__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicPost__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicPost__ArgProps,
      internalVariantPropNames: PlasmicPost__VariantProps
    });

    return PlasmicPost__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPost";
  } else {
    func.displayName = `PlasmicPost.${nodeName}`;
  }
  return func;
}

export const PlasmicPost = Object.assign(
  // Top-level PlasmicPost renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    supabaseEditButton: makeNodeComponent("supabaseEditButton"),
    supabaseDeleteButton: makeNodeComponent("supabaseDeleteButton"),
    supabaseMutation: makeNodeComponent("supabaseMutation"),
    supabaseModal: makeNodeComponent("supabaseModal"),
    supabaseImgField: makeNodeComponent("supabaseImgField"),

    // Metadata about props expected for PlasmicPost
    internalVariantProps: PlasmicPost__VariantProps,
    internalArgProps: PlasmicPost__ArgProps
  }
);

export default PlasmicPost;
/* prettier-ignore-end */
