// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: aGwaDyFceaTJ7MmVgLqAKM
// Component: uzKLlm8w4gA
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import LoginComponent from "../../LoginComponent"; // plasmic-import: Abg9jpf0kADO/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_copy_of_supabase.module.css"; // plasmic-import: aGwaDyFceaTJ7MmVgLqAKM/projectcss
import sty from "./PlasmicLoginPage.module.css"; // plasmic-import: uzKLlm8w4gA/css

export type PlasmicLoginPage__VariantMembers = {};

export type PlasmicLoginPage__VariantsArgs = {};
type VariantPropType = keyof PlasmicLoginPage__VariantsArgs;
export const PlasmicLoginPage__VariantProps = new Array<VariantPropType>();

export type PlasmicLoginPage__ArgsType = {};
type ArgPropType = keyof PlasmicLoginPage__ArgsType;
export const PlasmicLoginPage__ArgProps = new Array<ArgPropType>();

export type PlasmicLoginPage__OverridesType = {
  root?: p.Flex<"div">;
  loginComponent?: p.Flex<typeof LoginComponent>;
  link?: p.Flex<"a"> & Partial<LinkProps>;
  span?: p.Flex<"span">;
};

export interface DefaultLoginPageProps {}

function PlasmicLoginPage__RenderFunc(props: {
  variants: PlasmicLoginPage__VariantsArgs;
  args: PlasmicLoginPage__ArgsType;
  overrides: PlasmicLoginPage__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <LoginComponent
            data-plasmic-name={"loginComponent"}
            data-plasmic-override={overrides.loginComponent}
            className={classNames("__wab_instance", sty.loginComponent)}
            switchSignInOrSignUp2={
              <p.PlasmicLink
                data-plasmic-name={"link"}
                data-plasmic-override={overrides.link}
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link
                )}
                component={Link}
                href={"/signup-page" as const}
                platform={"nextjs"}
              >
                <React.Fragment>
                  <React.Fragment>{""}</React.Fragment>
                  <span
                    data-plasmic-name={"span"}
                    data-plasmic-override={overrides.span}
                    className={classNames(
                      projectcss.all,
                      projectcss.span,
                      projectcss.__wab_text,
                      projectcss.plasmic_default__inline,
                      sty.span
                    )}
                  >
                    {"Do you have an account? Sign in"}
                  </span>
                  <React.Fragment>{""}</React.Fragment>
                </React.Fragment>
              </p.PlasmicLink>
            }
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "loginComponent", "link", "span"],
  loginComponent: ["loginComponent", "link", "span"],
  link: ["link", "span"],
  span: ["span"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  loginComponent: typeof LoginComponent;
  link: "a";
  span: "span";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLoginPage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLoginPage__VariantsArgs;
    args?: PlasmicLoginPage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLoginPage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicLoginPage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicLoginPage__ArgProps,
      internalVariantPropNames: PlasmicLoginPage__VariantProps
    });

    return PlasmicLoginPage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLoginPage";
  } else {
    func.displayName = `PlasmicLoginPage.${nodeName}`;
  }
  return func;
}

export const PlasmicLoginPage = Object.assign(
  // Top-level PlasmicLoginPage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    loginComponent: makeNodeComponent("loginComponent"),
    link: makeNodeComponent("link"),
    span: makeNodeComponent("span"),

    // Metadata about props expected for PlasmicLoginPage
    internalVariantProps: PlasmicLoginPage__VariantProps,
    internalArgProps: PlasmicLoginPage__ArgProps
  }
);

export default PlasmicLoginPage;
/* prettier-ignore-end */
