// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: aGwaDyFceaTJ7MmVgLqAKM
// Component: Abg9jpf0kADO
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { SupabaseUserLogIn } from "../../CodeComponents/DatabaseComponents"; // plasmic-import: TCR7KmlqzR40/codeComponent
import { FormContextComponent } from "../../CodeComponents/Form"; // plasmic-import: ZuzBoRqG7Nz/codeComponent
import { FormTextInput } from "../../CodeComponents/Form"; // plasmic-import: R9j1z7GOLHg/codeComponent
import TextInput from "../../TextInput"; // plasmic-import: Hrt-8c55kCA/component
import Button from "../../Button"; // plasmic-import: 72kuX7z4jE2/component
import { SupabaseUserSignUp } from "../../CodeComponents/DatabaseComponents"; // plasmic-import: 1-3y7daFxmOI/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_copy_of_supabase.module.css"; // plasmic-import: aGwaDyFceaTJ7MmVgLqAKM/projectcss
import sty from "./PlasmicLoginComponent.module.css"; // plasmic-import: Abg9jpf0kADO/css

import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: ikNXI5MzGP8E/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: ZsbkirgRD0ll/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: -NPp1PMkI3Mu/icon

export type PlasmicLoginComponent__VariantMembers = {
  isSignUp: "isSignUp";
  error: "error";
};

export type PlasmicLoginComponent__VariantsArgs = {
  isSignUp?: SingleBooleanChoiceArg<"isSignUp">;
  error?: SingleBooleanChoiceArg<"error">;
};

type VariantPropType = keyof PlasmicLoginComponent__VariantsArgs;
export const PlasmicLoginComponent__VariantProps = new Array<VariantPropType>(
  "isSignUp",
  "error"
);

export type PlasmicLoginComponent__ArgsType = {
  errorMessage?: React.ReactNode;
  switchSignInOrSignUp2?: React.ReactNode;
};

type ArgPropType = keyof PlasmicLoginComponent__ArgsType;
export const PlasmicLoginComponent__ArgProps = new Array<ArgPropType>(
  "errorMessage",
  "switchSignInOrSignUp2"
);

export type PlasmicLoginComponent__OverridesType = {
  root?: p.Flex<"div">;
  text?: p.Flex<"div">;
  h3?: p.Flex<"h3">;
  supabaseUserLogIn?: p.Flex<typeof SupabaseUserLogIn>;
  supabaseUserSignUp?: p.Flex<typeof SupabaseUserSignUp>;
  switchSignInOrSignUp2?: p.Flex<"div">;
};

export interface DefaultLoginComponentProps {
  errorMessage?: React.ReactNode;
  switchSignInOrSignUp2?: React.ReactNode;
  isSignUp?: SingleBooleanChoiceArg<"isSignUp">;
  error?: SingleBooleanChoiceArg<"error">;
  className?: string;
}

function PlasmicLoginComponent__RenderFunc(props: {
  variants: PlasmicLoginComponent__VariantsArgs;
  args: PlasmicLoginComponent__ArgsType;
  overrides: PlasmicLoginComponent__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_tokens,
        sty.root,
        { [sty.rootisSignUp]: hasVariant(variants, "isSignUp", "isSignUp") }
      )}
    >
      {true ? (
        <div
          className={classNames(projectcss.all, sty.freeBox__nNBnT, {
            [sty.freeBoxerror__nNBnTjn4Jj]: hasVariant(
              variants,
              "error",
              "error"
            ),
            [sty.freeBoxisSignUp__nNBnTHyTlp]: hasVariant(
              variants,
              "isSignUp",
              "isSignUp"
            )
          })}
        >
          <div
            data-plasmic-name={"text"}
            data-plasmic-override={overrides.text}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text,
              {
                [sty.textisSignUp]: hasVariant(variants, "isSignUp", "isSignUp")
              }
            )}
          >
            <React.Fragment>
              <React.Fragment>{""}</React.Fragment>
              <h3
                data-plasmic-name={"h3"}
                data-plasmic-override={overrides.h3}
                className={classNames(
                  projectcss.all,
                  projectcss.h3,
                  projectcss.__wab_text,
                  sty.h3,
                  {
                    [sty.h3isSignUp]: hasVariant(
                      variants,
                      "isSignUp",
                      "isSignUp"
                    )
                  }
                )}
              >
                {"Supabase Demo"}
              </h3>
              <React.Fragment>{""}</React.Fragment>
            </React.Fragment>
          </div>
        </div>
      ) : null}
      {(hasVariant(variants, "isSignUp", "isSignUp") ? true : true) ? (
        <SupabaseUserLogIn
          data-plasmic-name={"supabaseUserLogIn"}
          data-plasmic-override={overrides.supabaseUserLogIn}
          className={classNames("__wab_instance", sty.supabaseUserLogIn, {
            [sty.supabaseUserLogInisSignUp]: hasVariant(
              variants,
              "isSignUp",
              "isSignUp"
            )
          })}
          redirectOnSuccess={"/" as const}
        >
          <FormContextComponent
            className={classNames("__wab_instance", sty.formContext__vzgCf)}
          >
            {true ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__yGwlf, {
                  [sty.freeBoxisSignUp__yGwlfHyTlp]: hasVariant(
                    variants,
                    "isSignUp",
                    "isSignUp"
                  )
                })}
              >
                <FormTextInput
                  className={classNames(
                    "__wab_instance",
                    sty.formTextInput__krNe3
                  )}
                  name={"email" as const}
                >
                  <TextInput
                    className={classNames(
                      "__wab_instance",
                      sty.textInput__h9Ubv,
                      {
                        [sty.textInputisSignUp__h9UbvHyTlp]: hasVariant(
                          variants,
                          "isSignUp",
                          "isSignUp"
                        )
                      }
                    )}
                    placeholder={"Email" as const}
                  />
                </FormTextInput>

                <FormTextInput
                  className={classNames(
                    "__wab_instance",
                    sty.formTextInput___6TYjx
                  )}
                  name={"password" as const}
                >
                  <TextInput
                    className={classNames(
                      "__wab_instance",
                      sty.textInput___4FPex
                    )}
                    placeholder={"Password" as const}
                    type={"password" as const}
                  />
                </FormTextInput>

                <Button
                  className={classNames("__wab_instance", sty.button__ojTbh)}
                >
                  {"Sign in"}
                </Button>
              </p.Stack>
            ) : null}
          </FormContextComponent>
        </SupabaseUserLogIn>
      ) : null}
      {(hasVariant(variants, "isSignUp", "isSignUp") ? true : true) ? (
        <SupabaseUserSignUp
          data-plasmic-name={"supabaseUserSignUp"}
          data-plasmic-override={overrides.supabaseUserSignUp}
          className={classNames("__wab_instance", sty.supabaseUserSignUp, {
            [sty.supabaseUserSignUpisSignUp]: hasVariant(
              variants,
              "isSignUp",
              "isSignUp"
            )
          })}
          redirectOnSuccess={"/" as const}
        >
          <FormContextComponent
            className={classNames("__wab_instance", sty.formContext__m3WPg)}
          >
            {true ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__kgdR3, {
                  [sty.freeBoxisSignUp__kgdR3HyTlp]: hasVariant(
                    variants,
                    "isSignUp",
                    "isSignUp"
                  )
                })}
              >
                <FormTextInput
                  className={classNames(
                    "__wab_instance",
                    sty.formTextInput___1TtvC
                  )}
                  name={"email" as const}
                >
                  <TextInput
                    className={classNames(
                      "__wab_instance",
                      sty.textInput___0Rxjw,
                      {
                        [sty.textInputisSignUp___0RxjwHyTlp]: hasVariant(
                          variants,
                          "isSignUp",
                          "isSignUp"
                        )
                      }
                    )}
                    placeholder={"Email" as const}
                  />
                </FormTextInput>

                <FormTextInput
                  className={classNames(
                    "__wab_instance",
                    sty.formTextInput__b0Bu5
                  )}
                  name={"password" as const}
                >
                  <TextInput
                    className={classNames(
                      "__wab_instance",
                      sty.textInput__i9Hze
                    )}
                    placeholder={"Password" as const}
                    type={"password" as const}
                  />
                </FormTextInput>

                <Button
                  className={classNames("__wab_instance", sty.button__gyCft)}
                >
                  {"Sign up"}
                </Button>
              </p.Stack>
            ) : null}
          </FormContextComponent>
        </SupabaseUserSignUp>
      ) : null}
      {(hasVariant(variants, "error", "error") ? true : true) ? (
        <div
          className={classNames(projectcss.all, sty.freeBox__stx6O, {
            [sty.freeBoxerror__stx6Ojn4Jj]: hasVariant(
              variants,
              "error",
              "error"
            )
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___6MEwR
                )}
              >
                {"Error message"}
              </div>
            ),

            value: args.errorMessage,
            className: classNames(sty.slotTargetErrorMessage)
          })}
        </div>
      ) : null}
      {true ? (
        <div
          data-plasmic-name={"switchSignInOrSignUp2"}
          data-plasmic-override={overrides.switchSignInOrSignUp2}
          className={classNames(projectcss.all, sty.switchSignInOrSignUp2, {
            [sty.switchSignInOrSignUp2isSignUp]: hasVariant(
              variants,
              "isSignUp",
              "isSignUp"
            )
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <p.PlasmicLink
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link___2NNOm
                )}
                component={Link}
                platform={"nextjs"}
              >
                <React.Fragment>
                  <React.Fragment>{""}</React.Fragment>
                  <span
                    className={classNames(
                      projectcss.all,
                      projectcss.span,
                      projectcss.__wab_text,
                      projectcss.plasmic_default__inline,
                      sty.span__q9Wth
                    )}
                  >
                    {"Do you have an account? Sign in"}
                  </span>
                  <React.Fragment>{""}</React.Fragment>
                </React.Fragment>
              </p.PlasmicLink>
            ),

            value: args.switchSignInOrSignUp2
          })}
        </div>
      ) : null}
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "text",
    "h3",
    "supabaseUserLogIn",
    "supabaseUserSignUp",
    "switchSignInOrSignUp2"
  ],
  text: ["text", "h3"],
  h3: ["h3"],
  supabaseUserLogIn: ["supabaseUserLogIn"],
  supabaseUserSignUp: ["supabaseUserSignUp"],
  switchSignInOrSignUp2: ["switchSignInOrSignUp2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  text: "div";
  h3: "h3";
  supabaseUserLogIn: typeof SupabaseUserLogIn;
  supabaseUserSignUp: typeof SupabaseUserSignUp;
  switchSignInOrSignUp2: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLoginComponent__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLoginComponent__VariantsArgs;
    args?: PlasmicLoginComponent__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLoginComponent__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicLoginComponent__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicLoginComponent__ArgProps,
      internalVariantPropNames: PlasmicLoginComponent__VariantProps
    });

    return PlasmicLoginComponent__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLoginComponent";
  } else {
    func.displayName = `PlasmicLoginComponent.${nodeName}`;
  }
  return func;
}

export const PlasmicLoginComponent = Object.assign(
  // Top-level PlasmicLoginComponent renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent("text"),
    h3: makeNodeComponent("h3"),
    supabaseUserLogIn: makeNodeComponent("supabaseUserLogIn"),
    supabaseUserSignUp: makeNodeComponent("supabaseUserSignUp"),
    switchSignInOrSignUp2: makeNodeComponent("switchSignInOrSignUp2"),

    // Metadata about props expected for PlasmicLoginComponent
    internalVariantProps: PlasmicLoginComponent__VariantProps,
    internalArgProps: PlasmicLoginComponent__ArgProps
  }
);

export default PlasmicLoginComponent;
/* prettier-ignore-end */
